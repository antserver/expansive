EXP(1)                           User Commands                          EXP(1)



NAME
       exp - Embedthis Expansive -- Static web site generator using Ejscript

SYNOPSIS
       exp
           --chdir directory
           --keep
           --listen IP:PORT
           --log path:level
           --noclean
           --norender
           --nowatch
           --quiet
           --verbose dir
           --version
           commands ...


       Commands:
           clean
           init
           render
           filters ...
           watch
           <CR>

DESCRIPTION
       Expansive  is  a  static web site generator using Ejscript.  It quickly
       creates static HTML pages from layouts, partials and content pages.



WHY EXPANSIVE?
       There are many static site generators, why another one?  Existing  site
       generators are often slow, very slow, painfully slow.  When creating or
       managing a web site, you need tools that  do  not  delay  the  creative
       design process. They need to be as fast as possible. Expansive is fast,
       pure and simple.

       Other site generators frequently provide poor  diagnostics.  Fine  when
       everything  works,  but  when a page fails to render due to a scripting
       error -- debugging can be a nightmare. Expansive  shows  exactly  where
       errors occur.


FEATURES
       Expansive  is implemented primarily as a single script of some 1K lines
       of Ejscript and is very hackable.  It has the following major features:

           .  Generate  static  web  sites  from  pages, layouts, partials and
       scripts
           . Ejscript templates for dynamic content
           . Layout pages to define the look and feel of site
           . Partial pages to include replicated content
           . Per-page meta data to control layouts and partials
           . Integrated web server to serve content
           . Watches for changes and automatically render site
           . Scripting support via change events
           . Automatic sitemap creation
           . Content transition pipeline
           . Open plugin architecture


NICE PARTS
       While Expansive has a strong feature set, there are  some  characteris-
       tics that make Expansive particularly sweet.

           . Fast, fast, fast
           . Full power of Ejscript in every page
           .  Very simple code. By leveraging Ejscript, the code is simple and
       clean
           . Easy to create and install new plugins
           . Great diagnostics when things go wrong



BASIC USAGE
       To prepare a directory for expansive and create an exp.json  configura-
       tion file:
           exp init

       To  install  new  plugins  to  transform content. The exp-less compiles
       *.less into css.
           exp install exp-less

       To render a site from 'documents' into 'public'
           exp render

       To serve content and watch for changes
           exp

       To watch for changes but not serve
           exp watch

       To render a matching set of documents
           exp documents/index.html
           exp documents/manual

       To clean the rendered site under 'public'
           exp clean



DIRECTORIES
       Expansive uses the following directories:

           layouts     For master page layouts
           partials    For partial web pages that can  be  included  by  other
       pages
           documents   Input web pages to be processed
           files       Files to be copied and not processed
           public      Final output directory containing the rendered web site

       These directories can be modified via the 'directories' object  in  the
       meta 'control' collection.


PROCESSING
       Expansive  operates by processing web pages from the 'documents' direc-
       tory. It uses layout pages from the 'layouts'  directory  and  includes
       partial  pages  from  the 'partials' directory. Raw files may be copied
       from the 'files' directory.  Content is rendered to the 'public' output
       directory.


CONFIGURATION
       Expansive  is  controlled  by  a  'exp.json'  configuration  file. This
       defines top level configuration for the site and controls how Expansive
       renders  the  site.  An  exp.json file must be present for Expansive to
       render content.

       To prepare a new site to use Expansive, run:

           exp init


       This creates an exp.json file similar to that below:

             {
                title: 'Home page title',
                url: 'Home page url',
                description: 'Meta data description (optional)',
                keywords: 'Meta data keywords (optional)',
             }

       The contents of the exp.json file are added to the Expansive meta  data
       collection  that  is  provided  to  every page, layout and partial. The
       exp.json file has a 'control' section that controls  the  operation  of
       Expansive.  The  are  a  set of pre-defined properties, but you can add
       your own data as well. See the META PROPERTIES section below.


       In the control section, the 'exclude' array defines a set of file  pat-
       terns  to  exclude  from  processing. The 'copy' array defines a set of
       file patterns to copy without processing. These patterns  are  relative
       to  the  'documents'  directory.  The script string defines an optional
       global script to inject code into the Ejscript execution  context.  The
       sitemap  collection configures what documents to include in the created
       sitemap XML file.


DYNAMIC CONTENT
       Expansive uses embedded  Javascript  in  web  pages  to  fully  support
       dynamic content.  Scripts can be embedded via the special Expansive tag
       '<@ ...  @>'. This will run the script when the page  is  rendered  and
       replace the script with rendered data.  For example:

        <p>Today is <@ write(Date()) @>

       The write function is used to render data to be used in place of the <@
       @> element.  You can use 'writeSafe' to HTML  escape  the  data  before
       writing.  You can also use a simpler form <@= that means use the result
       of the Javascript expression, HTML escapse the data and then write  it.
       For example:

        <p>Today is <@= Date() @>

       Even  simpler,  you can use an abbreviated @@variable to emit the value
       of a Javascript variable. For example:

        <p>Site URL is @@{meta.url}</p>

       The top URL of the site may be abbreviated as '@~'.


TRANSFORMATIONS
       Expansive will interpret document extensions and  automatically  trans-
       form  content  from  one  format to another.  For example, the filename
       'instructions.html.md' tells Expansive that the  data  is  in  Markdown
       format  via  the  '.md' extension and it should be converted to 'html'.
       Expansive will examine each nested extension and process  the  document
       until it reaches an extension for which there is no further transforma-
       tions defined.

       Expansive uses the '.exp' extension to specify the document has  embed-
       ded Ejscript. For example:

        index.html.md.exp

       This  means the file has Embedded Ejscript in a Markdown file that will
       be compiled to HTML. Expansive will process this by first  running  the
       embedded  Ejscript,  then piping the result through the Markdown filter
       and finally saving the result as 'index.html' after applying the appro-
       priate layout.


PLUGINS
       Expansive  may be extended via plugins that provide transformations and
       additional scripting capability. A site specifies the  plugins  to  use
       via a 'control.plugins' meta property in its exp.json. When a plugin is
       installed via 'exp install', the plugin automatically  to  the  ordered
       'plugins'  list in package.json.  When a plugin is loaded, it registers
       itself to handle specific file extension transformations. The transfor-
       mation pipeline for specific extensions can be overridden via the


USEFUL PLUGINS
       Here are some of the more useful Expansive plugins:

       exp-bash  Run shell scripts and capture the output

       exp-css   Process  CSS files to add browser specific prefixs and minify
                 the  output.  Requires  'autoprefixer'  and  'recess'  to  be
                 installed.

       exp-esp   Compile ESP web pages and applications.

       exp-gzip  Compress  final  output using gzip. Files are rendered with a
                 'gz' extension.

       exp-js    Process Javascript  files  to  mangle  and  minify.  Requires
                 'uglify' to be installed.

       exp-less  Process  Less  stylesheets  into CSS. Requires 'recess' to be
                 installed.

       exp-marked
                 Install the Markdown program. Use with the exp-md plugin  for
                 Markdown files.

       exp-md    Process Markdown files and emit html.

       exp-recess
                 Install  the recess program. Use with the exp-less plugin for
                 Less file processing, and the exp-css file for minifying  CSS
                 files.

       exp-sass  Process SASS files into CSS. Requires "sass" to be installed.

       exp-uglifyjs
                 Install Uglify-js. Use with the exp-js plugin to  mangle  and
                 minify Javascripts.


LAYOUTS
       A  layout  page  defines the top level HTML content for a set of pages.
       The layout defines the format, look and feel of the web  site  so  that
       each  pages  does  not need to replicate this content. Despite the fact
       that pages nominate a layout page to use, it is  actually  layout  page
       that  includes  the  content page inside it to create a composite page.
       The '<@ content @>' tag in the layout is replaced with the  actual  web
       page data after separating the page meta data.

       There  can  be  multiple  layout pages and the default layout is called
       'default.html.exp'. Layout pages may next, i.e. may  use  other  layout
       pages.  Layout pages can use any desired transformation file extension.

             <!DOCTYPE html>
             <html lang="en">
             <head>
                 <title><@= meta.title @></title>
                 <link href="css/api.css" rel="stylesheet" type="text/css" />
             </head>
             <body>
                 <div class="content">
                     <@ content @>
                 </div>
             </body>
             </html>



PARTIALS
       Web pages often need to have content that is common  across  a  set  of
       pages.  Expansive  supports this via partial pages that can be included
       by any page, layout or other partial page. A page specifies  a  partial
       by using the 'partial' Javascript function. For example:

        <@ partial('header') @>

       The partial function will search for a file starting with 'header.html'
       in the 'partials' directory.  Partials  are  transformed  according  to
       their  extension.  If  a partial called 'header.html.md.exp' was found,
       then it will be first transformed by  running  the  embedded  Ejscript,
       then  piping the output into the Markdown to create html data that will
       then be included in place of the original partial tag.


       Partials can be nested, in that a partial page may include another par-
       ital page to any depth.


META DATA
       Pages, layouts and partials can define meta data at the top of the file
       via a Javascript literal.  Meta data is passed to the  Ejscript  execu-
       tion  context for each page, layout and partial where scripts can exam-
       ine and use in rendering pages.

             {
                draft: true,
                navigation: 'blog',
             }
             <h1>Page Header</h1>

       The meta data is added to the current meta data collection  and  passed
       to  the  layout  page and any partials used by the page.  The meta data
       can be accessed via the 'expansive.meta' Javascript property.



       Meta data is inherited and aggregated as Expansive processes a web site
       directory. The meta data from upper directories is passed down to lower
       directories. In this manner upper levels can define the parameters  for
       subdirectories in the site. Meta data is never passed back up the tree.

       Meta data can also be defined by including additional 'exp.json'  files
       at any level in the documents directory.


META PROPERTIES
       Expansive  defines a rich set of meta properties for you to use in your
       pages:

       basename    Basename portion of the public document filename.

       control     Control collection specified in exp.json.

       date        Generation date of the document.

       document    Name of the document in  'documents'  that  is  being  pro-
                   cessed.

       extension   The extension of the public document filename.

       extensions  The set of extensions on the original input document.

       file        Filename of the document or partial being processed.

       from        The  filename  extension  being  processed  by  the current
                   transformation.

       isLayout    True if a layout is being processed.

       isPartial   True if a partial page is being processed.

       layout      Layout page in use. Set to '' if no layout being used.

       mode        Index in the modes property. The selected property  collec-
                   tion is copied up to the top level of the meta data.

       modes       Array  of  property  collections.  Used  to define 'debug',
                   'release' configurations.

       partial     Name of the partial page being processed.

       path        Input filename of the document.

       public      Final public filename for the document.

       service     Name of the transformation service being run.

       to          The destination filename extension after processing by  the
                   current transformation.

       top         URL for the top level home page of the site.

       url         URL for the current page.

META CONTROL
       Expansive defines a set of control properites in the meta.control:

       copy        Array  of patterns to copy without processing. The patterns
                   may include "*" or "**". If a directory  is  specifed,  all
                   files under the directory are copied.

       dependencies
                   Hash  of file dependency relationships. The hash key is the
                   document path and the value is a set of files that if modi-
                   fied,  cause  the document to be rendered. The document and
                   files are relative to the documents directory. The  set  of
                   files can be a string or an array of files. Each value file
                   may contain "*" or "**".

       directories Directories collection. Entries for  'documents',  'files',
                   'public', 'layouts', and 'partials'.

       exclude     Array  of patterns to exclude from processing. The patterns
                   may include "*" or "**". If a directory  is  specifed,  all
                   files under the directory are excluded.

       listen      Address on which to listen for HTTP requests. May be just a
                   port number.

       plugins     List of plugins to use.

       plugins     List of plugins to use.

       script      Script to  evaluate  to  inject  code  into  the  Expansive
                   Ejscript global execution context.

       sitemap     Control what files to include in a sitemap.

       transforms  Hash  of extension mappings to a list of transform services
                   for those mappings. Mappings are in the form 'ext ->  ext'.

       watch       Time  in  milliseconds to wait between checking for render-
                   ing.


CREATING PLUGINS
       Expansive   plugins    are    created    using    the    Pak    utility
       (https://embedthis.com/pak)   and  published  to  the  Pak  Catalog  at
       (https://embedthis.com/catalog/). The plugin  contains  a  package.json
       file that includes an app.expansive property collection. For example:

        {
           control: {
               transforms: {
                   name:       'my-transform',
                   from:       'ext1',
                   to:         'ext2',
                   script:     '
                       function transform(contents, meta, service) {
                           return transformed data
                       }
                   '
               }
           }
        }


       The plugin specifies a one or more transformations via the 'transforms'
       collection. Each transform definition provides  an  implemention  of  a
       transform  service. The 'name' property specifies the transform service
       name. The 'from' property specifies the starting filename extension and
       the 'to' property specifies the ending extension. If all extensions are
       supported, set the value to '*'. Both 'from' and 'to' may be arrays  if
       multiple extensions are supported.

       The  transform  script should define a global 'transform' function that
       will be invoked for matching content.  It is  invoked  with  the  'con-
       tents'  to transform (String), the meta data collection and the service
       object that contains service options.  The function should  return  the
       transformed data.

       A  plugin  may  also  define  other Ejscript functions and variables in
       'script' that will be injected into the global scope of Expansive  when
       it executes.


SCRIPTING
       Expansive defines a top level global named "expansive" to access Expan-
       sive services. This object provides the following properties and  meth-
       ods:


       getFileMeta(filename)
              To return the meta data specified in the given file.

       collection({key: value})
              To  return  a  list  of  matching  documents that have meta data
              matching the specified keys and values.

       trace(tag, msg...)
              To emit console trace while processing.


COMMANDS
       clean  Remove rendered content from the 'public' output directory.

       init   Initialize a directory by creating an  'exp.json'  configuration
              file.

       render Render the site by processing files from 'documents', 'layouts',
              'partials' and 'files' into the 'public' output directory.

       watch  Watch for changes to 'documents', 'layouts' and  'partials'  and
              render  the  modified  files. Changes to 'layouts' or 'partials'
              will cause the entire site to be rendered.

       <CR>   Running exp without any arguments will cause  run  the  embedded
              web  server  to serve the site. By default Expansive will listen
              on port 4000. This can be modified via the 'listen' property  in
              the meta collection.

       patterns ...
              Providing  a  list of patterns to filter the set of documents to
              render.  Expansive will render only  the  documents  that  begin
              with the given patterns.



OPTIONS
       --chdir directory
                 Change to directory before running.


       --keep URI
                 Keep intermediate files when transforming content. Useful for
                 debugging.


       --listen IP:PORT URI
                 Change the port on which Expansive will listen. Can omit  the
                 IP portion and only specify a port.


       --log filename:level
                 Omit  trace  to  the specified file. The level is a verbosity
                 level from 0-5 with 5  being  the  most  verbose.   The  '-v'
                 option  is  an  alias  for level 1.  Can also abbreviate this
                 switch by just specify a level  option.  For  example:  '-5'.
                 HTTP  requests and HTTP headers will be traced at levels 2-4.


       --noclean Do not clean the  'public'  directory  before  rendering.  By
                 default  Expansive will remove all the content under 'public'
                 first.


       --norender
                 Do not do an initial render before watching for changes.


       --nowatch Do not watch for changes when serving content.


       --quiet   Run in quiet mode. Do not emit activity trace to the console.


       --verbose Run in verbose mode. Emit more activity trace.


       --versions URI
                 Show exp version information.



REPORTING BUGS
       Report bugs to dev@embedthis.com.

COPYRIGHT
       Copyright  (C)  2004-2014  Embedthis  Software.  Bit and Ejscript are a
       trademarks of Embedthis Software.

SEE ALSO
       ejs, me, http://embedthis.com/exp/



exp                               March 2014                            EXP(1)
