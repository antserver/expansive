#
#   expansive-windows-default.nmake -- Makefile to build Embedthis Expansive for windows
#

NAME                  = expansive
VERSION               = 0.5.0

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
ENTRY                 = _DllMainCRTStartup
!ELSE
ARCH                  = x86
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF
!IF "$(ME_COM_EJS)" == ""
ME_COM_EJS            = 1
!ENDIF
!IF "$(ME_COM_EST)" == ""
ME_COM_EST            = 1
!ENDIF
!IF "$(ME_COM_HTTP)" == ""
ME_COM_HTTP           = 1
!ENDIF
!IF "$(ME_COM_LIB)" == ""
ME_COM_LIB            = 1
!ENDIF
!IF "$(ME_COM_LINK)" == ""
ME_COM_LINK           = 1
!ENDIF
!IF "$(ME_COM_MPR)" == ""
ME_COM_MPR            = 1
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 0
!ENDIF
!IF "$(ME_COM_OSDEP)" == ""
ME_COM_OSDEP          = 1
!ENDIF
!IF "$(ME_COM_PCRE)" == ""
ME_COM_PCRE           = 1
!ENDIF
!IF "$(ME_COM_RC)" == ""
ME_COM_RC             = 1
!ENDIF
!IF "$(ME_COM_SQLITE)" == ""
ME_COM_SQLITE         = 0
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_WINSDK)" == ""
ME_COM_WINSDK         = 1
!ENDIF
!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF

!IF "$(ME_COM_HTTP)" == ""
ME_COM_OPENSSL_PATH   = "/usr"
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_WINSDK)" == ""
ME_COM_WINSDK         = 1
!ENDIF

!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF


CC                    = cl
LD                    = link
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -D_REENTRANT -D_MT -DME_COM_COMPILER=$(ME_COM_COMPILER) -DME_COM_EJS=$(ME_COM_EJS) -DME_COM_EST=$(ME_COM_EST) -DME_COM_HTTP=$(ME_COM_HTTP) -DME_COM_LIB=$(ME_COM_LIB) -DME_COM_LINK=$(ME_COM_LINK) -DME_COM_MPR=$(ME_COM_MPR) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_OSDEP=$(ME_COM_OSDEP) -DME_COM_PCRE=$(ME_COM_PCRE) -DME_COM_RC=$(ME_COM_RC) -DME_COM_SQLITE=$(ME_COM_SQLITE) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_WINSDK=$(ME_COM_WINSDK) -DME_COM_ZLIB=$(ME_COM_ZLIB) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -nodefaultlib -incremental:no -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:$(BUILD)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib msvcrt.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis Expansive
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


!IF "$(ME_COM_EJS)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.mod
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.exe
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\expansive.exe
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ca.crt
!IF "$(ME_COM_HTTP)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\http.exe
!ENDIF
!IF "$(ME_COM_EST)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libest.dll
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\libmprssl.dll
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\sample.json

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\expansive-windows-default-me.h $(BUILD)\inc\me.h

!IF "$(SHOW)" != ""
	@echo ..... [Info] Use "make SHOW=1" to trace executed commands and errors.
LOG =
!ELSE
LOG = >nul
!ENDIF

clean:
	if exist "build\$(CONFIG)\obj\ejs.obj" del /Q "build\$(CONFIG)\obj\ejs.obj"
	if exist "build\$(CONFIG)\obj\ejsLib.obj" del /Q "build\$(CONFIG)\obj\ejsLib.obj"
	if exist "build\$(CONFIG)\obj\ejsc.obj" del /Q "build\$(CONFIG)\obj\ejsc.obj"
	if exist "build\$(CONFIG)\obj\estLib.obj" del /Q "build\$(CONFIG)\obj\estLib.obj"
	if exist "build\$(CONFIG)\obj\expParser.obj" del /Q "build\$(CONFIG)\obj\expParser.obj"
	if exist "build\$(CONFIG)\obj\expansive.obj" del /Q "build\$(CONFIG)\obj\expansive.obj"
	if exist "build\$(CONFIG)\obj\http.obj" del /Q "build\$(CONFIG)\obj\http.obj"
	if exist "build\$(CONFIG)\obj\httpLib.obj" del /Q "build\$(CONFIG)\obj\httpLib.obj"
	if exist "build\$(CONFIG)\obj\mprLib.obj" del /Q "build\$(CONFIG)\obj\mprLib.obj"
	if exist "build\$(CONFIG)\obj\mprSsl.obj" del /Q "build\$(CONFIG)\obj\mprSsl.obj"
	if exist "build\$(CONFIG)\obj\pcre.obj" del /Q "build\$(CONFIG)\obj\pcre.obj"
	if exist "build\$(CONFIG)\obj\zlib.obj" del /Q "build\$(CONFIG)\obj\zlib.obj"
	if exist "build\$(CONFIG)\bin\ejsc.exe" del /Q "build\$(CONFIG)\bin\ejsc.exe"
	if exist "build\$(CONFIG)\bin\ejsc.lib" del /Q "build\$(CONFIG)\bin\ejsc.lib"
	if exist "build\$(CONFIG)\bin\ejsc.pdb" del /Q "build\$(CONFIG)\bin\ejsc.pdb"
	if exist "build\$(CONFIG)\bin\ejsc.exp" del /Q "build\$(CONFIG)\bin\ejsc.exp"
	if exist "build\$(CONFIG)\bin\ejs.exe" del /Q "build\$(CONFIG)\bin\ejs.exe"
	if exist "build\$(CONFIG)\bin\ejs.lib" del /Q "build\$(CONFIG)\bin\ejs.lib"
	if exist "build\$(CONFIG)\bin\ejs.pdb" del /Q "build\$(CONFIG)\bin\ejs.pdb"
	if exist "build\$(CONFIG)\bin\ejs.exp" del /Q "build\$(CONFIG)\bin\ejs.exp"
	if exist "build\$(CONFIG)\bin\expansive.exe" del /Q "build\$(CONFIG)\bin\expansive.exe"
	if exist "build\$(CONFIG)\bin\expansive.lib" del /Q "build\$(CONFIG)\bin\expansive.lib"
	if exist "build\$(CONFIG)\bin\expansive.pdb" del /Q "build\$(CONFIG)\bin\expansive.pdb"
	if exist "build\$(CONFIG)\bin\expansive.exp" del /Q "build\$(CONFIG)\bin\expansive.exp"
	if exist "build\$(CONFIG)\bin\ca.crt" del /Q "build\$(CONFIG)\bin\ca.crt"
	if exist "build\$(CONFIG)\bin\http.exe" del /Q "build\$(CONFIG)\bin\http.exe"
	if exist "build\$(CONFIG)\bin\http.lib" del /Q "build\$(CONFIG)\bin\http.lib"
	if exist "build\$(CONFIG)\bin\http.pdb" del /Q "build\$(CONFIG)\bin\http.pdb"
	if exist "build\$(CONFIG)\bin\http.exp" del /Q "build\$(CONFIG)\bin\http.exp"
	if exist "build\$(CONFIG)\bin\libejs.dll" del /Q "build\$(CONFIG)\bin\libejs.dll"
	if exist "build\$(CONFIG)\bin\libejs.lib" del /Q "build\$(CONFIG)\bin\libejs.lib"
	if exist "build\$(CONFIG)\bin\libejs.pdb" del /Q "build\$(CONFIG)\bin\libejs.pdb"
	if exist "build\$(CONFIG)\bin\libejs.exp" del /Q "build\$(CONFIG)\bin\libejs.exp"
	if exist "build\$(CONFIG)\bin\libest.dll" del /Q "build\$(CONFIG)\bin\libest.dll"
	if exist "build\$(CONFIG)\bin\libest.lib" del /Q "build\$(CONFIG)\bin\libest.lib"
	if exist "build\$(CONFIG)\bin\libest.pdb" del /Q "build\$(CONFIG)\bin\libest.pdb"
	if exist "build\$(CONFIG)\bin\libest.exp" del /Q "build\$(CONFIG)\bin\libest.exp"
	if exist "build\$(CONFIG)\bin\libhttp.dll" del /Q "build\$(CONFIG)\bin\libhttp.dll"
	if exist "build\$(CONFIG)\bin\libhttp.lib" del /Q "build\$(CONFIG)\bin\libhttp.lib"
	if exist "build\$(CONFIG)\bin\libhttp.pdb" del /Q "build\$(CONFIG)\bin\libhttp.pdb"
	if exist "build\$(CONFIG)\bin\libhttp.exp" del /Q "build\$(CONFIG)\bin\libhttp.exp"
	if exist "build\$(CONFIG)\bin\libmpr.dll" del /Q "build\$(CONFIG)\bin\libmpr.dll"
	if exist "build\$(CONFIG)\bin\libmpr.lib" del /Q "build\$(CONFIG)\bin\libmpr.lib"
	if exist "build\$(CONFIG)\bin\libmpr.pdb" del /Q "build\$(CONFIG)\bin\libmpr.pdb"
	if exist "build\$(CONFIG)\bin\libmpr.exp" del /Q "build\$(CONFIG)\bin\libmpr.exp"
	if exist "build\$(CONFIG)\bin\libmprssl.dll" del /Q "build\$(CONFIG)\bin\libmprssl.dll"
	if exist "build\$(CONFIG)\bin\libmprssl.lib" del /Q "build\$(CONFIG)\bin\libmprssl.lib"
	if exist "build\$(CONFIG)\bin\libmprssl.pdb" del /Q "build\$(CONFIG)\bin\libmprssl.pdb"
	if exist "build\$(CONFIG)\bin\libmprssl.exp" del /Q "build\$(CONFIG)\bin\libmprssl.exp"
	if exist "build\$(CONFIG)\bin\libpcre.dll" del /Q "build\$(CONFIG)\bin\libpcre.dll"
	if exist "build\$(CONFIG)\bin\libpcre.lib" del /Q "build\$(CONFIG)\bin\libpcre.lib"
	if exist "build\$(CONFIG)\bin\libpcre.pdb" del /Q "build\$(CONFIG)\bin\libpcre.pdb"
	if exist "build\$(CONFIG)\bin\libpcre.exp" del /Q "build\$(CONFIG)\bin\libpcre.exp"
	if exist "build\$(CONFIG)\bin\libzlib.dll" del /Q "build\$(CONFIG)\bin\libzlib.dll"
	if exist "build\$(CONFIG)\bin\libzlib.lib" del /Q "build\$(CONFIG)\bin\libzlib.lib"
	if exist "build\$(CONFIG)\bin\libzlib.pdb" del /Q "build\$(CONFIG)\bin\libzlib.pdb"
	if exist "build\$(CONFIG)\bin\libzlib.exp" del /Q "build\$(CONFIG)\bin\libzlib.exp"
	if exist "build\$(CONFIG)\bin\sample.json" del /Q "build\$(CONFIG)\bin\sample.json"

#
#   me.h
#

build\$(CONFIG)\inc\me.h: $(DEPS_36)

#
#   osdep.h
#
DEPS_37 = $(DEPS_37) src\osdep\osdep.h
DEPS_37 = $(DEPS_37) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\osdep.h: $(DEPS_37)
	@echo ..... [Copy] build\$(CONFIG)\inc\osdep.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\osdep\osdep.h+modified build\$(CONFIG)\inc\osdep.h $(LOG)

#
#   mpr.h
#
DEPS_38 = $(DEPS_38) src\mpr\mpr.h
DEPS_38 = $(DEPS_38) build\$(CONFIG)\inc\me.h
DEPS_38 = $(DEPS_38) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\mpr.h: $(DEPS_38)
	@echo ..... [Copy] build\$(CONFIG)\inc\mpr.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mpr\mpr.h+modified build\$(CONFIG)\inc\mpr.h $(LOG)

#
#   mpr.h
#

src\mpr\mpr.h: $(DEPS_39)

#
#   mprLib.obj
#
DEPS_40 = $(DEPS_40) src\mpr\mpr.h

build\$(CONFIG)\obj\mprLib.obj: \
    src\mpr\mprLib.c $(DEPS_40)
	@echo .. [Compile] build\$(CONFIG)\obj\mprLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprLib.obj -Fd$(BUILD)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\mpr\mprLib.c $(LOG)

#
#   libmpr
#
DEPS_41 = $(DEPS_41) build\$(CONFIG)\inc\osdep.h
DEPS_41 = $(DEPS_41) build\$(CONFIG)\inc\mpr.h
DEPS_41 = $(DEPS_41) build\$(CONFIG)\obj\mprLib.obj

build\$(CONFIG)\bin\libmpr.dll: $(DEPS_41)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmpr.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\mprLib.obj" $(LIBS)  $(LOG)

#
#   pcre.h
#
DEPS_42 = $(DEPS_42) src\pcre\pcre.h

build\$(CONFIG)\inc\pcre.h: $(DEPS_42)
	@echo ..... [Copy] build\$(CONFIG)\inc\pcre.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\pcre\pcre.h+modified build\$(CONFIG)\inc\pcre.h $(LOG)

#
#   pcre.h
#

src\pcre\pcre.h: $(DEPS_43)

#
#   pcre.obj
#
DEPS_44 = $(DEPS_44) build\$(CONFIG)\inc\me.h
DEPS_44 = $(DEPS_44) src\pcre\pcre.h

build\$(CONFIG)\obj\pcre.obj: \
    src\pcre\pcre.c $(DEPS_44)
	@echo .. [Compile] build\$(CONFIG)\obj\pcre.obj
	"$(CC)" -c -Fo$(BUILD)\obj\pcre.obj -Fd$(BUILD)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre\pcre.c $(LOG)

!IF "$(ME_COM_PCRE)" == "1"
#
#   libpcre
#
DEPS_45 = $(DEPS_45) build\$(CONFIG)\inc\pcre.h
DEPS_45 = $(DEPS_45) build\$(CONFIG)\obj\pcre.obj

build\$(CONFIG)\bin\libpcre.dll: $(DEPS_45)
	@echo ..... [Link] build\$(CONFIG)\bin\libpcre.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libpcre.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\pcre.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   http.h
#
DEPS_46 = $(DEPS_46) src\http\http.h
DEPS_46 = $(DEPS_46) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\inc\http.h: $(DEPS_46)
	@echo ..... [Copy] build\$(CONFIG)\inc\http.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\http\http.h+modified build\$(CONFIG)\inc\http.h $(LOG)

#
#   http.h
#

src\http\http.h: $(DEPS_47)

#
#   httpLib.obj
#
DEPS_48 = $(DEPS_48) src\http\http.h

build\$(CONFIG)\obj\httpLib.obj: \
    src\http\httpLib.c $(DEPS_48)
	@echo .. [Compile] build\$(CONFIG)\obj\httpLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\httpLib.obj -Fd$(BUILD)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\http\httpLib.c $(LOG)

!IF "$(ME_COM_HTTP)" == "1"
#
#   libhttp
#
DEPS_49 = $(DEPS_49) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_PCRE)" == "1"
DEPS_49 = $(DEPS_49) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_49 = $(DEPS_49) build\$(CONFIG)\inc\http.h
DEPS_49 = $(DEPS_49) build\$(CONFIG)\obj\httpLib.obj

LIBS_49 = $(LIBS_49) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_49 = $(LIBS_49) libpcre.lib
!ENDIF

build\$(CONFIG)\bin\libhttp.dll: $(DEPS_49)
	@echo ..... [Link] build\$(CONFIG)\bin\libhttp.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libhttp.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\httpLib.obj" $(LIBPATHS_49) $(LIBS_49) $(LIBS_49) $(LIBS)  $(LOG)
!ENDIF

#
#   zlib.h
#
DEPS_50 = $(DEPS_50) src\zlib\zlib.h
DEPS_50 = $(DEPS_50) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\zlib.h: $(DEPS_50)
	@echo ..... [Copy] build\$(CONFIG)\inc\zlib.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\zlib\zlib.h+modified build\$(CONFIG)\inc\zlib.h $(LOG)

#
#   zlib.h
#

src\zlib\zlib.h: $(DEPS_51)

#
#   zlib.obj
#
DEPS_52 = $(DEPS_52) build\$(CONFIG)\inc\me.h
DEPS_52 = $(DEPS_52) src\zlib\zlib.h

build\$(CONFIG)\obj\zlib.obj: \
    src\zlib\zlib.c $(DEPS_52)
	@echo .. [Compile] build\$(CONFIG)\obj\zlib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\zlib.obj -Fd$(BUILD)\obj\zlib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\zlib\zlib.c $(LOG)

!IF "$(ME_COM_ZLIB)" == "1"
#
#   libzlib
#
DEPS_53 = $(DEPS_53) build\$(CONFIG)\inc\zlib.h
DEPS_53 = $(DEPS_53) build\$(CONFIG)\obj\zlib.obj

build\$(CONFIG)\bin\libzlib.dll: $(DEPS_53)
	@echo ..... [Link] build\$(CONFIG)\bin\libzlib.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libzlib.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\zlib.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   ejs.slots.h
#

src\ejs\ejs.slots.h: $(DEPS_54)

#
#   ejs.h
#
DEPS_55 = $(DEPS_55) src\ejs\ejs.h
DEPS_55 = $(DEPS_55) build\$(CONFIG)\inc\me.h
DEPS_55 = $(DEPS_55) build\$(CONFIG)\inc\osdep.h
DEPS_55 = $(DEPS_55) build\$(CONFIG)\inc\mpr.h
DEPS_55 = $(DEPS_55) build\$(CONFIG)\inc\http.h
DEPS_55 = $(DEPS_55) src\ejs\ejs.slots.h
DEPS_55 = $(DEPS_55) build\$(CONFIG)\inc\pcre.h
DEPS_55 = $(DEPS_55) build\$(CONFIG)\inc\zlib.h

build\$(CONFIG)\inc\ejs.h: $(DEPS_55)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejs\ejs.h+modified build\$(CONFIG)\inc\ejs.h $(LOG)

#
#   ejs.slots.h
#
DEPS_56 = $(DEPS_56) src\ejs\ejs.slots.h

build\$(CONFIG)\inc\ejs.slots.h: $(DEPS_56)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.slots.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejs\ejs.slots.h+modified build\$(CONFIG)\inc\ejs.slots.h $(LOG)

#
#   ejsByteGoto.h
#
DEPS_57 = $(DEPS_57) src\ejs\ejsByteGoto.h

build\$(CONFIG)\inc\ejsByteGoto.h: $(DEPS_57)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejsByteGoto.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejs\ejsByteGoto.h+modified build\$(CONFIG)\inc\ejsByteGoto.h $(LOG)

#
#   ejs.h
#

src\ejs\ejs.h: $(DEPS_58)

#
#   ejsLib.obj
#
DEPS_59 = $(DEPS_59) src\ejs\ejs.h
DEPS_59 = $(DEPS_59) build\$(CONFIG)\inc\mpr.h
DEPS_59 = $(DEPS_59) build\$(CONFIG)\inc\pcre.h
DEPS_59 = $(DEPS_59) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\obj\ejsLib.obj: \
    src\ejs\ejsLib.c $(DEPS_59)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsLib.obj -Fd$(BUILD)\obj\ejsLib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ejs\ejsLib.c $(LOG)

!IF "$(ME_COM_EJS)" == "1"
#
#   libejs
#
!IF "$(ME_COM_HTTP)" == "1"
DEPS_60 = $(DEPS_60) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
DEPS_60 = $(DEPS_60) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_60 = $(DEPS_60) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_60 = $(DEPS_60) build\$(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_60 = $(DEPS_60) build\$(CONFIG)\inc\ejs.h
DEPS_60 = $(DEPS_60) build\$(CONFIG)\inc\ejs.slots.h
DEPS_60 = $(DEPS_60) build\$(CONFIG)\inc\ejsByteGoto.h
DEPS_60 = $(DEPS_60) build\$(CONFIG)\obj\ejsLib.obj

!IF "$(ME_COM_HTTP)" == "1"
LIBS_60 = $(LIBS_60) libhttp.lib
!ENDIF
LIBS_60 = $(LIBS_60) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_60 = $(LIBS_60) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_60 = $(LIBS_60) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\libejs.dll: $(DEPS_60)
	@echo ..... [Link] build\$(CONFIG)\bin\libejs.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libejs.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejsLib.obj" $(LIBPATHS_60) $(LIBS_60) $(LIBS_60) $(LIBS)  $(LOG)
!ENDIF

#
#   ejsc.obj
#
DEPS_61 = $(DEPS_61) src\ejs\ejs.h

build\$(CONFIG)\obj\ejsc.obj: \
    src\ejs\ejsc.c $(DEPS_61)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsc.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsc.obj -Fd$(BUILD)\obj\ejsc.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ejs\ejsc.c $(LOG)

!IF "$(ME_COM_EJS)" == "1"
#
#   ejsc
#
DEPS_62 = $(DEPS_62) build\$(CONFIG)\bin\libejs.dll
DEPS_62 = $(DEPS_62) build\$(CONFIG)\obj\ejsc.obj

LIBS_62 = $(LIBS_62) libejs.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_62 = $(LIBS_62) libhttp.lib
!ENDIF
LIBS_62 = $(LIBS_62) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_62 = $(LIBS_62) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_62 = $(LIBS_62) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\ejsc.exe: $(DEPS_62)
	@echo ..... [Link] build\$(CONFIG)\bin\ejsc.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\ejsc.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejsc.obj" $(LIBPATHS_62) $(LIBS_62) $(LIBS_62) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJS)" == "1"
#
#   ejs.mod
#
DEPS_63 = $(DEPS_63) src\ejs\ejs.es
DEPS_63 = $(DEPS_63) build\$(CONFIG)\bin\ejsc.exe

build\$(CONFIG)\bin\ejs.mod: $(DEPS_63)
	cd src\ejs
	@echo .. [Compile] ejs.mod
	..\..\$(BUILD)\bin\ejsc --out ../../$(BUILD)/bin/ejs.mod --optimize 9 --bind --require null ejs.es
	cd ..\..
!ENDIF

#
#   ejs.obj
#
DEPS_64 = $(DEPS_64) src\ejs\ejs.h

build\$(CONFIG)\obj\ejs.obj: \
    src\ejs\ejs.c $(DEPS_64)
	@echo .. [Compile] build\$(CONFIG)\obj\ejs.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejs.obj -Fd$(BUILD)\obj\ejs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ejs\ejs.c $(LOG)

!IF "$(ME_COM_EJS)" == "1"
#
#   ejscmd
#
DEPS_65 = $(DEPS_65) build\$(CONFIG)\bin\libejs.dll
DEPS_65 = $(DEPS_65) build\$(CONFIG)\obj\ejs.obj

LIBS_65 = $(LIBS_65) libejs.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_65 = $(LIBS_65) libhttp.lib
!ENDIF
LIBS_65 = $(LIBS_65) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_65 = $(LIBS_65) libpcre.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_65 = $(LIBS_65) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\ejs.exe: $(DEPS_65)
	@echo ..... [Link] build\$(CONFIG)\bin\ejs.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\ejs.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejs.obj" $(LIBPATHS_65) $(LIBS_65) $(LIBS_65) $(LIBS)  $(LOG)
!ENDIF

#
#   expansive.mod
#
DEPS_66 = $(DEPS_66) src\expansive.es
DEPS_66 = $(DEPS_66) src\ExpParser.es
DEPS_66 = $(DEPS_66) paks\ejs-version\Version.es
!IF "$(ME_COM_EJS)" == "1"
DEPS_66 = $(DEPS_66) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\expansive.mod: $(DEPS_66)
	@echo .. [Compile] expansive.mod
	.\$(BUILD)\bin\ejsc --debug --out ./$(BUILD)/bin/expansive.mod --optimize 9 src/expansive.es src/ExpParser.es paks/ejs-version/Version.es

#
#   expansive.h
#

build\$(CONFIG)\inc\expansive.h: $(DEPS_67)

#
#   expansive.obj
#
DEPS_68 = $(DEPS_68) build\$(CONFIG)\inc\ejs.h
DEPS_68 = $(DEPS_68) build\$(CONFIG)\inc\expansive.h

build\$(CONFIG)\obj\expansive.obj: \
    src\expansive.c $(DEPS_68)
	@echo .. [Compile] build\$(CONFIG)\obj\expansive.obj
	"$(CC)" -c -Fo$(BUILD)\obj\expansive.obj -Fd$(BUILD)\obj\expansive.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\expansive.c $(LOG)

#
#   expParser.obj
#
DEPS_69 = $(DEPS_69) build\$(CONFIG)\inc\ejs.h
DEPS_69 = $(DEPS_69) build\$(CONFIG)\inc\expansive.h

build\$(CONFIG)\obj\expParser.obj: \
    src\expParser.c $(DEPS_69)
	@echo .. [Compile] build\$(CONFIG)\obj\expParser.obj
	"$(CC)" -c -Fo$(BUILD)\obj\expParser.obj -Fd$(BUILD)\obj\expParser.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\expParser.c $(LOG)

#
#   expansive
#
DEPS_70 = $(DEPS_70) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_HTTP)" == "1"
DEPS_70 = $(DEPS_70) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
DEPS_70 = $(DEPS_70) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_70 = $(DEPS_70) build\$(CONFIG)\bin\expansive.mod
DEPS_70 = $(DEPS_70) build\$(CONFIG)\obj\expansive.obj
DEPS_70 = $(DEPS_70) build\$(CONFIG)\obj\expParser.obj

LIBS_70 = $(LIBS_70) libmpr.lib
!IF "$(ME_COM_HTTP)" == "1"
LIBS_70 = $(LIBS_70) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_70 = $(LIBS_70) libpcre.lib
!ENDIF
!IF "$(ME_COM_EJS)" == "1"
LIBS_70 = $(LIBS_70) libejs.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_70 = $(LIBS_70) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\expansive.exe: $(DEPS_70)
	@echo ..... [Link] build\$(CONFIG)\bin\expansive.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\expansive.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\expansive.obj" "$(BUILD)\obj\expParser.obj" $(LIBPATHS_70) $(LIBS_70) $(LIBS_70) $(LIBS)  $(LOG)

#
#   http-ca-crt
#
DEPS_71 = $(DEPS_71) src\http\ca.crt

build\$(CONFIG)\bin\ca.crt: $(DEPS_71)
	@echo ..... [Copy] build\$(CONFIG)\bin\ca.crt
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\http\ca.crt+modified build\$(CONFIG)\bin\ca.crt $(LOG)

#
#   http.obj
#
DEPS_72 = $(DEPS_72) src\http\http.h

build\$(CONFIG)\obj\http.obj: \
    src\http\http.c $(DEPS_72)
	@echo .. [Compile] build\$(CONFIG)\obj\http.obj
	"$(CC)" -c -Fo$(BUILD)\obj\http.obj -Fd$(BUILD)\obj\http.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\http\http.c $(LOG)

!IF "$(ME_COM_HTTP)" == "1"
#
#   httpcmd
#
DEPS_73 = $(DEPS_73) build\$(CONFIG)\bin\libhttp.dll
DEPS_73 = $(DEPS_73) build\$(CONFIG)\obj\http.obj

LIBS_73 = $(LIBS_73) libhttp.lib
LIBS_73 = $(LIBS_73) libmpr.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_73 = $(LIBS_73) libpcre.lib
!ENDIF

build\$(CONFIG)\bin\http.exe: $(DEPS_73)
	@echo ..... [Link] build\$(CONFIG)\bin\http.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\http.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\http.obj" $(LIBPATHS_73) $(LIBS_73) $(LIBS_73) $(LIBS)  $(LOG)
!ENDIF

#
#   est.h
#
DEPS_74 = $(DEPS_74) src\est\est.h

build\$(CONFIG)\inc\est.h: $(DEPS_74)
	@echo ..... [Copy] build\$(CONFIG)\inc\est.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\est\est.h+modified build\$(CONFIG)\inc\est.h $(LOG)

#
#   est.h
#

src\est\est.h: $(DEPS_75)

#
#   estLib.obj
#
DEPS_76 = $(DEPS_76) src\est\est.h

build\$(CONFIG)\obj\estLib.obj: \
    src\est\estLib.c $(DEPS_76)
	@echo .. [Compile] build\$(CONFIG)\obj\estLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\estLib.obj -Fd$(BUILD)\obj\estLib.pdb -nologo -GR- -Zi -Od -MDd $(DFLAGS) $(IFLAGS) src\est\estLib.c $(LOG)

!IF "$(ME_COM_EST)" == "1"
#
#   libest
#
DEPS_77 = $(DEPS_77) build\$(CONFIG)\inc\osdep.h
DEPS_77 = $(DEPS_77) build\$(CONFIG)\inc\est.h
DEPS_77 = $(DEPS_77) build\$(CONFIG)\obj\estLib.obj

build\$(CONFIG)\bin\libest.dll: $(DEPS_77)
	@echo ..... [Link] build\$(CONFIG)\bin\libest.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libest.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\estLib.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   mprSsl.obj
#
DEPS_78 = $(DEPS_78) src\mpr\mpr.h

build\$(CONFIG)\obj\mprSsl.obj: \
    src\mpr\mprSsl.c $(DEPS_78)
	@echo .. [Compile] build\$(CONFIG)\obj\mprSsl.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprSsl.obj -Fd$(BUILD)\obj\mprSsl.pdb $(CFLAGS) $(DFLAGS) -DME_COM_OPENSSL_PATH="$(ME_COM_OPENSSL_PATH)" $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\include" src\mpr\mprSsl.c $(LOG)

#
#   libmprssl
#
DEPS_79 = $(DEPS_79) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_EST)" == "1"
DEPS_79 = $(DEPS_79) build\$(CONFIG)\bin\libest.dll
!ENDIF
DEPS_79 = $(DEPS_79) build\$(CONFIG)\obj\mprSsl.obj

LIBS_79 = $(LIBS_79) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_79 = $(LIBS_79) libeay32.lib
LIBPATHS_79 = $(LIBPATHS_79) -libpath:$(ME_COM_OPENSSL_PATH)/lib
LIBPATHS_79 = $(LIBPATHS_79) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_79 = $(LIBS_79) libssleay32.lib
LIBPATHS_79 = $(LIBPATHS_79) -libpath:$(ME_COM_OPENSSL_PATH)/lib
LIBPATHS_79 = $(LIBPATHS_79) -libpath:$(ME_COM_OPENSSL_PATH)
!ENDIF
!IF "$(ME_COM_EST)" == "1"
LIBS_79 = $(LIBS_79) libest.lib
!ENDIF

build\$(CONFIG)\bin\libmprssl.dll: $(DEPS_79)
	@echo ..... [Link] build\$(CONFIG)\bin\libmprssl.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmprssl.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)   "$(BUILD)\obj\mprSsl.obj" $(LIBPATHS_79) $(LIBS_79) $(LIBS_79) $(LIBS)  $(LOG)

#
#   sample
#
DEPS_80 = $(DEPS_80) src\sample.json

build\$(CONFIG)\bin\sample.json: $(DEPS_80)
	@echo ..... [Copy] build\$(CONFIG)\bin\sample.json
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\sample.json+modified build\$(CONFIG)\bin\sample.json $(LOG)

